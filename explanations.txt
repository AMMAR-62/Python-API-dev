needs of virtual environments?
project 1 -> fast api v1.2.1
new project 2 -> fast api v2.4.3
upgrade fast api
this may be a problem, if the fast api version is not compatible with other project
the projects need different versions
isolated environments, virtual environments.

==============================================

interpreter in the virtual environment needs to be used so we change the interpreter

==============================================
why we need a schema:
 - it's a pain to get all the values from the body.
 - the client can send whatever data they want.
 - the data isn't getting validated.
 - we ultimately want to force the client to send data in a schema that we expect.
 - the pydantic is used for defining the schema.
 - we use the pydantic models which are the similar to the mongoose models in the MERN stack.
 - pydantic models can be converted to the dictionary by using the .dict() method.

==============================================
CRUD - create, read, update, delete - four main functions of the api.
create - post.
read - get
update - put/patch
delete - delete

 - we always use the plurals, it's the convention.
 - like /posts, /posts/:id, /posts, etc.
 - we use the curly braces for the argument like {id}
 - patch - for specific field.
 - put - all of the same information, and change the field we need.

===============================================
we refractor the code as:
 - the fast api provides in built support for the documentation.
 - it is powered by swagger ui.
 - for any folder to act as a package python requires you to store the __init__.py file in it.
what is a database:
 - Collection of organised data that can be easily accessed and managed.
 - we don't work or interact with database directly.
 - instead we make use of a software referred to as a database management system.
 - relational - mysql, postgresql, oracle, sql server.
 - nosql - mongodb, dynamodb, oracle, sql server.
relational database and sql:
 - structured query language - languase used to communicate with the database.
 - each instance of postgres can be carved into multiple separate databases.
 - by default every postgres, installation comes with one database already created called postgres.
 - this is important because postgres requires you to specify the name of a database to make a connection, so there needs to be always be one database.
tables:
 - a table represents a subject or event in an application.
 - users, products, purchases, can be tables of an e-commerce application.
columns and rows:
 - a table is made up of columns and rows.
 - each column represents a different attribute.
 - each row represents a different entry in the table.
postgres datatype:
 - database have datatypes just like any programming language.
 - postgres -> numeric (int, decimal, precision), text(varchar, text), bool(boolean), sequence(array)
primary key:
 - is a column or group of column that uniquely identifies each row in a table.
 - table can have one and only one primary key.
 - each entry must be unique, no duplicates.
 - the primary key does not have to be the ID column always. It's up to you to decide which column uniquely defines each record.
 - in this example, since an email can only be registered once, the email column can also be used as the primary key.
unique constraints:
 - a unique constraint can be applied to any column to make sure every record has a unique value for that column.
null constraints:
 - by default, when adding a new entry to a database, any column can be left blank, when a column is left blank, it has a null value.
 - if you need column to be properly filled in to create a new record, a NOT NULL constraint can be added to the column to ensure that the column is never left blank.
 - creating the database.
CREATE DATABASE fastapi
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    CONNECTION LIMIT = -1;
-- SELECT * FROM products;
-- SELECT name FROM products;
-- SELECT name, id, price FROM products;
-- SELECT id as product_id FROM products;
-- SELECT * FROM products WHERE id=12;
-- SELECT * FROM products WHERE inventory = 0;
-- SELECT * FROM products WHERE name = 'Laptop';
-- SELECT * FROM products WHERE price>5000;
-- SELECT * FROM products WHERE price<5000;
-- SELECT * FROM products WHERE inventory<>0;
-- SELECT * FROM products WHERE inventory>0 AND price>4000;
-- SELECT * FROM products WHERE id = 1 or id=2 or id=3;
-- SELECT * FROM products WHERE id IN (1,2,3);
-- SELECT * FROM products ORDER BY price;
-- SELECT * FROM products ORDER BY inventory DESC, price ASC;
-- SELECT * FROM products ORDER BY created_at DESC;
-- SELECT * FROM products WHERE price>5000 ORDER BY price;
-- SELECT * FROM products WHERE price>10 LIMIT 5;
-- SELECT * FROM products ORDER BY id LIMIT 5;
-- SELECT * FROM products ORDER BY id LIMIT 5 OFFSET 2;
-- INSERT INTO products (name, price, inventory) VALUES ('tortilla', 4, 1000);
-- INSERT INTO products (price, name, inventory) VALUES (5000,'Showcase' , 1000);
-- INSERT INTO products (price, name, inventory) VALUES (30000,'Computer' , 1000) returning *;
-- INSERT INTO products (price, name, inventory) VALUES (7000,'Water Filter', 1000), (8000, 'Wooden Almirah', 1) returning *;
-- DELETE FROM products WHERE Id =11;
-- DELETE FROM products WHERE id = 12 RETURNING *;
-- DELETE FROM products WHERE inventory=0 RETURNING *;
-- UPDATE products SET name='Electronic Filter', price=15000 WHERE id=25;
-- UPDATE products SET name='Eletric Car', price=3000000 WHERE name='Car' RETURNING *;

===============================================
OBJECT RELATIONAL MODEL:
 -  Layer of abstraction that sits between the database and use.
 - We can perform all database operations through traditional python code. No more SQL!
 - instead of using raw sql, we use the raw python code.
WHAT CAN ORMs DO:
 - Instead of manually defining tables in postgres, we can define our tables as python models.
  - Queries can be made exclusively through python code. No SQL is necessary.
SQLALCHEMY:
- SqlAlchemy is one of the most popular python ORMs.
 - It is a standalone library and has no association with FastAPI. It can be use with any other python web frameworks or any python based application.
however sqlalchemy is not sufficient for modifying the tables and things like that.
 - we can use the alembic software for more support.

Schema Models vs. ORM Models:
 - Schema/Pydantic Models define the structure of a request and response.
 - This ensure that when a user wants to create a post, the request will only go through if it has a "title" and "content" in the body.
SQLALCHEMY MODELS:
 - responsible for defining the columns of our "posts" table within postgres.
 - is used to query, create, delete and update entries within the database.

===============================================
JWT Token Authentication:
 - Client, API: two main ways, session based authentication, to track whether a user is logged, and when the user is logged out.
 - it's stateless, there is nothing on the database, nothing on the api, etc, we do not store, it's stored on the frontend.
 - if the credentials match up, then we make the jwt token, the client doesn't know and doesn't cares about the tokens.
 - api is going to find that if it's a valid token, you provide the authentication, provide the token.
 - components of a tokens are: - it's not encrypted, header (includes metadata about the token), payload (is upto us, we can send anything that we want, the token itself is not encrypted, we don't put any password or secrets in the payload, it includes info such as id of the user, the role of the user, privileged or regular user,etc), signature (contains the combination of header, payload and token secret, we use the signature to know that this is the user)
 - the signature is used to check if the token is valid, there is no encryption, jwt token is just for data integrity.
 - the password, the special password for the jwt token is only stored on the server and nowhere else.
 - anybody can change the data of the token, but they can't generate the actual signature needed for a different information.

Relationships:
 - posts, users
 - any other applications, posts on the feed, every post is ultimately associated with the user account.
 - there is nothing that ties the user to the post table.
 - how do we know which post is related to which users.
 - we need to setup special relationships, to associate the post to the user.
 - in postgres, we do this, by creating a column with the foreign key, it's a way of telling SQL that the column is connected to the other table.
 - we specify which specific column is it connected to, this just relates the tables.
 - two users can't create a single post and one user can create multiple posts.
 - it is one to many relationship b/w the user and the post.
 - it's going to check before inserting that the id is peresent before inserting into the table.
 - SELECT * FROM public.users WHERE user_id = 17.
 - DELETE FROM users WHERE id=17;
 - SELECT * FROM posts;
 - join allows us to jam up the multiple columns 
 - SELECT * FROM users WHERE user = id;

===============================================
.env file:
  - environment variables are to be kept in the .env file.
  - pydantic models can be used to set the environment models.
  - this performs the validation for our environment variables.
  - we set up a class which extends BaseSettings.
  - we want it put outside the app directory, as the default location accepted by pydantic is before the project.

===============================================
voting/like systems requirements:
 - Users should able to like a post.
 - Should only be able to like a post once.
 - retrieving posts should also fetch the total number of likes.

Vote Model"
 - Column referencing post id.
 - Column referencing id of user who like the post.
 - A user should only be able to like a post once so this means than we need to ensure every post_id / voter_id is a unique combination.

composite keys:
 - primary keys that spans multiple columns.
 - since primary keys must be unique, this will ensure no user can like a post twice.

===============================================
Vote Route:
 - Path will be at "/vote"
 - the user id will be extracted from the JWT token.
 - the body will contain the id of the post the user is voting on as well as the direction of the vote.
 - a vote direction of 1 means we want to add a vote, a direction of 0 means we want to delete a vote.

 ===============================================
 we are going to joins more or less in complex relationships and tables, retreiving data from different tables, is kind of inefficient and multiple queries are not practical.
 we start of the query and make joins in the table and match the matching columsn and return the joins of the table.
-- SELECT * FROM posts LEFT JOIN users ON posts.owner_id = users.id
-- SELECT title, content, email FROM posts LEFT JOIN users on posts.owner_id = users.id
-- SELECT posts.id, email FROM posts LEFT JOIN users ON posts.owner_id = users.id
-- SELECT posts.*, email FROM posts LEFT JOIN users ON posts.owner_id = users.id
left join - shows something that always exist on the left table and not on the right table and the right table values are replace by null, vice versa is true for right join.
-- SELECT users.id, users.email, COUNT(posts.id) FROM posts RIGHT JOIN users ON posts.owner_id = users.id GROUP BY users.id
-- SELECT posts.id, COUNT(votes.post_id) FROM  posts LEFT JOIN votes ON posts.id = votes.post_id GROUP BY posts.id;

===============================================
Developers track changes to code and rollback code easily with GIT. Why can't we do the same for database models/tables
Database migrations allows us to incrementally track changes to database schema and rollback changes to any point in time.
We will use a tool called Alembic to make changes to our database.
Alembic can also automatically pull database models from SqlAlchemy and generate the proper tables.

===============================================
About alembic:
 - revisions - this helps you track the changes in the database configuration and schema.
 - alembic revision -m
 - alembic revision -m "create posts table" -> this creates the create_posts_table.py file is created under the versions folder.
 - in this file there is the upgrade and the downgrade functions where we need to define thhe action when we need to change the actions performed.
 - this is manual and it's not automatically done in alembic.
 - whenevere we upgrad to downgrade we say alembic upgrade revision_identifier, or alembic downgrade revision_identifier, this upgrades or downgrades the version.
 - there is also other options of history, current, etc to see different revisions.
 - alembic creates an extra table for keeping track of the revisions, this is done in the database as provided in the sqlalchemy url which is provided for in the alembic.ini file.
 - there is also an up and down revision for each version, this gives the opportunity to revert/rollback from the current revision to the revision in history.
 - the head in the alembic revision refers to the latest version added and it can be not upgraded but the current refers to the upgraded versions.
 - in alembic downgrade command we can give the parameter as the revision number or the number of upgrades from the current, this downgrades to the nth previous upgrade
 - alembic takes in the sqlalchemy models and can craete the exact tables and columns and constraints using these models, and we do not need to specify externally. - this can be done with the help of --autogenerate option.\

===============================================
The CORS policy:
 - Cross Origin Resource Sharing (CORS) allows you to make requests from a web browser on one domain to a server on a different domain.
 - By default our API will only allow web browsers running on the same domain as our server to make requests to it.
 - we import the CORS middleware 

===============================================
we deploy the application on Heroku
we create the heroku app by saying -> heroku create app_name.
this creates the remote, just like git named heroku for the project.
we can push on this remote just like github.
we need to create the "Procfile" -> this tells heroku about what to do with the code.
- we give the configurations as -> web: uvicorn app.main:app --host=0.0.0.0 --port=${PORT:-5000}
- this tells heroku to run the app using uvicorn and host it on global default, so that anyone can access it, and the port number to be 5000 if the default "PORT" variable is not availabel with heroku.

